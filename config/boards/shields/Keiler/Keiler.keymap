// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


#define SYM 1
#define NUM 2

/* KEY POSITIONS

// ╭──────────────╮ ╭──────────────╮
// │ 0  1  2  3  4│ │ 5  6  7  8  9│
// │10 11 12 13 14│ │15 16 17 18 19│
// │20 21 22 23 24│ │25 26 27 28 29│
// ╰─────╮30 31 32│ │33 34 35╭─────╯
//       ╰────────╯ ╰────────╯

*/

&kscan0 {
  debounce-press-ms = <10>;
  debounce-release-ms = <15>;
};

&mt {
  flavor="balanced";
  tapping_term_ms = <120>;
  quick-tap-ms=<200>;
};

&lt{
  flavor="hold-preferred";
  tapping_term_ms = <120>;
  quick-tap-ms=<200>;
};

/ {
    macros {
        // Macro to send LCTRL + LSHIFT + F11
        // This is equivalent to &kp LCTL(LSFT(F11)) but using explicit macro steps
        lctrl_lshift_f11: lctrl_lshift_f11 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>; // Small delay between actions, can be 0
            tap-ms = <10>;  // How long a "tap" is held, can be 0 for very quick taps
            bindings
                = <&macro_press &kp LCTRL>  // Press LCTRL
                , <&macro_press &kp LSHFT>  // Press LSHFT
                , <&macro_tap &kp F11>      // Tap F11 (press and release)
                , <&macro_release &kp LSHFT>// Release LSHFT
                , <&macro_release &kp LCTRL> // Release LCTRL
                ;
        };

        // Macro to send LCTRL + LSHIFT + F12
        lctrl_lshift_f12: lctrl_lshift_f12 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp F12>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp LCTRL>
                ;
        };
    };
    behaviors {
        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings
                = <&macro_param_1to1>
                , <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_param_2to1>
                , <&macro_press &kp MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_2to1>
                , <&macro_release &kp MACRO_PLACEHOLDER>
                , <&macro_param_1to1>
                , <&macro_release &mo MACRO_PLACEHOLDER>
                ;
        };

        enter: enter_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <120>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            retro-tap;
        };
    };
    combos {
        compatible = "zmk,combos";
        combo_open_param {
            timeout-ms = <120>;
            key-positions = <22 23>;
            bindings = <&kp LPAR>;
        };
        combo_tick {
            timeout-ms = <120>;
            key-positions = <0 1>;
            bindings = <&kp GRAVE>;
        };
        combo_s_tab {
            timeout-ms = <120>;
            key-positions = <11 13>;
            bindings = <&kp TAB>;
        };
        combo_close_param {
            timeout-ms = <120>;
            key-positions = <26 27>;
            bindings = <&kp RPAR>;
        };
        combo_open_block {
            timeout-ms = <120>;
            key-positions = <21 22>;
            bindings = <&kp LBKT>;
        };
        combo_close_block {
            timeout-ms = <120>;
            key-positions = <27 28>;
            bindings = <&kp RBKT>;
        };
        combo_close_bracket {
            timeout-ms = <120>;
            key-positions = <28 29>;
            bindings = <&kp BSLH>;
        };
        combo_backslash {
            timeout-ms = <120>;
            key-positions = <20 21>;
            bindings = <&kp FSLH>;
        };
    };
    keymap {
        compatible = "zmk,keymap";
                
            default_layer {
        bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &kp Q         &kp W         &kp E         &kp R         &kp T             &kp Y         &kp U         &kp I         &kp O         &kp P 
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp A         &kp S         &kp D         &kp F         &kp G             &kp H         &kp J         &kp K         &kp L         &enter LCTRL RET
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────
     &kp Z         &kp X         &kp C         &kp V         &kp B             &kp N         &kp M         &kp COMMA      &kp DOT      &enter LALT SINGLE_QUOTE
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                          &lctrl_lshift_f11  &lt 1 ESC    &mt LGUI BSPC       &kp SPACE     &kp LSHIFT  &lctrl_lshift_f12
        //                              ╰──────────┴──────────┴──────────╯     ╰──────────┴──────────┴──────────╯
        >;
        };

            left_layer {
        bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5            &kp N6        &kp N7        &kp N8        &kp N9        &kp N0 
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp EXCL      &kp QMARK     &kp HASH      &kp COLON     &kp PLUS          &kp MINUS     &kp EQUAL     &kp SEMI      &kp AT        &kp GRAVE 
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp BSLH      &kp TILDE     &kp STAR      &kp AMPS      &kp TILDE         &kp UNDER     &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT 
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &bt BT_SEL 0 &mo 1         &kp LALT          &kp LCTRL    &kp PRCNT &bt BT_SEL 1
//                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
        >;
        };
    };
};
